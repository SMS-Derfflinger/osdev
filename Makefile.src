# disable kvm to debug triple faults
QEMU_BIN=##PLACEHOLDER_1##
GDB_BIN=##PLACEHOLDER_2##
QEMU_ACCELERATION_FLAG=##PLACEHOLDER_3##
QEMU_DEBUG_FLAG=#-d cpu_reset,int -D build/qemu.log
ARCH=##PLACEHOLDER_6##

ifeq ($(ARCH),x86_64)
MACHINE_TYPE=q35
QEMU_ARGS=-machine $(MACHINE_TYPE) -drive id=disk,file=build/boot.img,format=raw,if=none \
	-device ahci,id=ahci -device ide-hd,drive=disk,bus=ahci.0 -smp 4 \
	-no-reboot -no-shutdown $(QEMU_ACCELERATION_FLAG) $(QEMU_DEBUG_FLAG)
else ifeq ($(ARCH),riscv64)
MACHINE_TYPE=virt
QEMU_ARGS=-machine $(MACHINE_TYPE) -drive id=disk,file=build/boot.img,format=raw,if=none \
	-device virtio-blk-device,drive=disk -smp 4 \
	-no-reboot -no-shutdown $(QEMU_ACCELERATION_FLAG) $(QEMU_DEBUG_FLAG)
endif

FDISK_BIN ?= ##PLACEHOLDER_5##

CROSS_COMPILE=##PLACEHOLDER_4##
.PHONY: run
run: build
	$(QEMU_BIN) $(QEMU_ARGS) -display curses -S -s
.PHONY: srun
srun: build
	$(QEMU_BIN) $(QEMU_ARGS) -display none -S -s -serial mon:stdio
.PHONY: nativerun
nativerun: build
	$(QEMU_BIN) $(QEMU_ARGS) -display none -serial mon:stdio

.PHONY: prepare
prepare:
	cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug $(CROSS_COMPILE) -DARCH=$(ARCH)
	cp build/compile_commands.json .

.PHONY: reprepare
reprepare: clean prepare
	true

.PHONY: build
build:
	cmake --build build -j 6 --target boot.img

.PHONY: clean
clean:
	-rm -rf build
	-rm compile_commands.json

.PHONY: clean-all
clean-all: clean
	-rm Makefile

.PHONY: debug
debug:
	-$(GDB_BIN) --symbols=build/kernel.out \
		-iex 'source pretty-print.py' \
		-iex 'set pagination off' \
		-iex 'set output-radix 16' \
		-iex 'set print asm-demangle on' \
		-iex 'set print pretty on' \
		-iex 'target remote:1234'
	-killall $(QEMU_BIN)

.PHONY: tmux-debug
tmux-debug:
	tmux new-session -s gbos-debug -d
	-tmux split-window -t gbos-debug -hf
	-tmux send-keys -t gbos-debug:1.1 'make srun' C-m
	-tmux send-keys -t gbos-debug:1.2 'make debug' C-m C-m
	-tmux attach -t gbos-debug
	tmux kill-session -t gbos-debug

build/fs.img: init_script.sh
	sh script/build-img.sh

build/boot.img: build/fs.img build/mbr_hole.bin
	dd if=build/mbr_hole.bin of=build/boot.img
ifeq ($(ARCH),x86_64)
	dd if=build/fs.img of=build/boot.img bs=$(shell expr 4 \* 1024 \* 1024) seek=1 conv=notrunc
	sh -c 'echo n; echo; echo; echo 8192; echo; echo a; echo w' | $(FDISK_BIN) build/boot.img
else
	dd if=build/fs.img of=build/boot.img bs=$(shell expr 4 \* 1024 \* 1024) seek=1 conv=notrunc
	@echo "Note: Using default partitioning for $(ARCH)"
endif

build/boot.vdi: build/boot.img
	-rm build/boot.vdi
	VBoxManage convertfromraw $< $@ --format VDI

.PHONY: image
image: build/boot.img
